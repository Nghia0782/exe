import { Link } from 'react-router-dom'
import { useState, useEffect } from 'react'
import Header from '../components/Header'
import Footer from '../components/Footer'

export default function About() {
  const [isVisible, setIsVisible] = useState(false)
  const [stats, setStats] = useState({
    users: 0,
    products: 0,
    orders: 0,
    satisfaction: 0
  })
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  })
  const [formErrors, setFormErrors] = useState({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [submitSuccess, setSubmitSuccess] = useState(false)

  useEffect(() => {
    setIsVisible(true)
    
    // Animate stats
    const animateStats = () => {
      const targets = { users: 50000, products: 10000, orders: 25000, satisfaction: 98 }
      const duration = 2000
      const steps = 60
      const stepDuration = duration / steps
      
      let currentStep = 0
      const timer = setInterval(() => {
        currentStep++
        const progress = currentStep / steps
        
        setStats({
          users: Math.floor(targets.users * progress),
          products: Math.floor(targets.products * progress),
          orders: Math.floor(targets.orders * progress),
          satisfaction: Math.floor(targets.satisfaction * progress)
        })
        
        if (currentStep >= steps) {
          clearInterval(timer)
          setStats(targets)
        }
      }, stepDuration)
    }
    
    const timer = setTimeout(animateStats, 500)
    return () => clearTimeout(timer)
  }, [])

  const validateForm = () => {
    const errors = {}
    
    if (!formData.name.trim()) {
      errors.name = 'Vui l√≤ng nh·∫≠p h·ªç v√† t√™n'
    }
    
    if (!formData.email.trim()) {
      errors.email = 'Vui l√≤ng nh·∫≠p email'
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = 'Email kh√¥ng h·ª£p l·ªá'
    }
    
    if (!formData.message.trim()) {
      errors.message = 'Vui l√≤ng nh·∫≠p n·ªôi dung tin nh·∫Øn'
    }
    
    setFormErrors(errors)
    return Object.keys(errors).length === 0
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
    
    // Clear error when user starts typing
    if (formErrors[name]) {
      setFormErrors(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!validateForm()) return
    
    setIsSubmitting(true)
    
    // Simulate API call
    setTimeout(() => {
      setIsSubmitting(false)
      setSubmitSuccess(true)
      setFormData({ name: '', email: '', subject: '', message: '' })
      
      // Hide success message after 5 seconds
      setTimeout(() => {
        setSubmitSuccess(false)
      }, 5000)
    }, 2000)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-50 via-blue-50 to-cyan-50">
      <Header />
      
      {/* Hero Section */}
      <section className="relative py-20 bg-gradient-to-br from-blue-600 via-cyan-600 to-teal-600 text-white overflow-hidden">
        {/* Animated Background Elements */}
        <div className="absolute inset-0">
          <div className="absolute top-10 left-10 w-20 h-20 bg-white/10 rounded-full animate-pulse"></div>
          <div className="absolute top-32 right-20 w-16 h-16 bg-white/10 rounded-full animate-bounce"></div>
          <div className="absolute bottom-20 left-1/4 w-12 h-12 bg-white/10 rounded-full animate-ping"></div>
          <div className="absolute bottom-32 right-1/3 w-8 h-8 bg-white/10 rounded-full animate-pulse"></div>
        </div>
        
        <div className="container text-center relative z-10">
          <div className={`transform transition-all duration-1000 ${isVisible ? 'translate-y-0 opacity-100' : 'translate-y-10 opacity-0'}`}>
            <h1 className="text-5xl md:text-7xl font-extrabold mb-6 bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent">
              V·ªÅ ch√∫ng t√¥i
            </h1>
            <p className="text-xl md:text-2xl text-white/90 max-w-4xl mx-auto leading-relaxed mb-8">
              N·ªÅn t·∫£ng cho thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá h√†ng ƒë·∫ßu Vi·ªát Nam, k·∫øt n·ªëi ng∆∞·ªùi c·∫ßn thu√™ v·ªõi ng∆∞·ªùi cho thu√™ m·ªôt c√°ch an to√†n v√† ti·ªán l·ª£i.
            </p>
            <div className="flex flex-wrap justify-center gap-4 mt-8">
              <div className="bg-white/20 backdrop-blur-sm rounded-full px-6 py-3 border border-white/30">
                <span className="text-sm font-semibold">üèÜ Top 1 Vi·ªát Nam</span>
              </div>
              <div className="bg-white/20 backdrop-blur-sm rounded-full px-6 py-3 border border-white/30">
                <span className="text-sm font-semibold">üõ°Ô∏è 100% An to√†n</span>
              </div>
              <div className="bg-white/20 backdrop-blur-sm rounded-full px-6 py-3 border border-white/30">
                <span className="text-sm font-semibold">‚ö° 24/7 H·ªó tr·ª£</span>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <section className="py-16 bg-white">
        <div className="container">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            {[
              { number: stats.users, suffix: '+', label: 'Ng∆∞·ªùi d√πng', icon: 'üë•' },
              { number: stats.products, suffix: '+', label: 'S·∫£n ph·∫©m', icon: 'üì±' },
              { number: stats.orders, suffix: '+', label: 'ƒê∆°n h√†ng', icon: 'üì¶' },
              { number: stats.satisfaction, suffix: '%', label: 'H√†i l√≤ng', icon: '‚≠ê' }
            ].map((stat, index) => (
              <div key={index} className="text-center group">
                <div className="text-4xl mb-2 group-hover:scale-110 transition-transform duration-300">
                  {stat.icon}
                </div>
                <div className="text-3xl md:text-4xl font-bold text-blue-600 mb-2">
                  {stat.number.toLocaleString()}{stat.suffix}
                </div>
                <div className="text-gray-600 font-medium">{stat.label}</div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Mission & Vision */}
      <section className="py-20">
        <div className="container">
          <div className="grid lg:grid-cols-2 gap-12 mb-20">
            <div className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl">
              <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center text-white text-2xl mb-6">
                üéØ
              </div>
              <h2 className="text-3xl font-bold text-gray-900 mb-4">S·ª© m·ªánh</h2>
              <p className="text-gray-600 text-lg leading-relaxed">
                Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i nghi·ªám cho thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá an to√†n, minh b·∫°ch v√† ti·∫øt ki·ªám chi ph√≠ cho m·ªçi ng∆∞·ªùi d√πng Vi·ªát Nam.
              </p>
            </div>
            
            <div className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl">
              <div className="w-16 h-16 bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl flex items-center justify-center text-white text-2xl mb-6">
                üëÅÔ∏è
              </div>
              <h2 className="text-3xl font-bold text-gray-900 mb-4">T·∫ßm nh√¨n</h2>
              <p className="text-gray-600 text-lg leading-relaxed">
                Tr·ªü th√†nh n·ªÅn t·∫£ng cho thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá s·ªë 1 ƒê√¥ng Nam √Å, t·∫°o ra m·ªôt c·ªông ƒë·ªìng chia s·∫ª thi·∫øt b·ªã b·ªÅn v·ªØng v√† th√¢n thi·ªán.
              </p>
            </div>
          </div>

          {/* Values */}
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">Gi√° tr·ªã c·ªët l√µi</h2>
            <p className="text-gray-600 text-xl">Nh·ªØng nguy√™n t·∫Øc ƒë·ªãnh h∆∞·ªõng m·ªçi ho·∫°t ƒë·ªông c·ªßa ch√∫ng t√¥i</p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                icon: 'üõ°Ô∏è',
                title: 'An to√†n & Tin c·∫≠y',
                desc: 'X√°c minh ng∆∞·ªùi d√πng, b·∫£o v·ªá giao d·ªãch v√† ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng thi·∫øt b·ªã.'
              },
              {
                icon: '‚ö°',
                title: 'Nhanh ch√≥ng & Ti·ªán l·ª£i',
                desc: 'Quy tr√¨nh ƒë∆°n gi·∫£n, t√¨m ki·∫øm th√¥ng minh v√† h·ªó tr·ª£ 24/7.'
              },
              {
                icon: 'ü§ù',
                title: 'Minh b·∫°ch & C√¥ng b·∫±ng',
                desc: 'Gi√° c·∫£ r√µ r√†ng, ƒë√°nh gi√° ch√¢n th·ª±c v√† gi·∫£i quy·∫øt tranh ch·∫•p c√¥ng b·∫±ng.'
              }
            ].map((value, index) => (
              <div key={index} className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl text-center hover:shadow-2xl transition-all duration-500 hover:-translate-y-2">
                <div className="w-20 h-20 bg-gradient-to-r from-blue-100 to-cyan-100 rounded-2xl flex items-center justify-center text-3xl mx-auto mb-6">
                  {value.icon}
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-4">{value.title}</h3>
                <p className="text-gray-600 leading-relaxed">{value.desc}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Timeline */}
      <section className="py-20 bg-gradient-to-br from-gray-50 to-blue-50">
        <div className="container">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">H√†nh tr√¨nh ph√°t tri·ªÉn</h2>
            <p className="text-gray-600 text-xl">Nh·ªØng c·ªôt m·ªëc quan tr·ªçng trong qu√° tr√¨nh x√¢y d·ª±ng n·ªÅn t·∫£ng</p>
          </div>

          <div className="relative">
            {/* Timeline Line */}
            <div className="absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-gradient-to-b from-blue-500 to-cyan-500 rounded-full"></div>
            
            <div className="space-y-12">
              {[
                {
                  year: '2020',
                  title: 'Kh·ªüi t·∫°o √Ω t∆∞·ªüng',
                  desc: 'Nh·∫≠n th·∫•y nhu c·∫ßu cho thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá ng√†y c√†ng tƒÉng, ch√∫ng t√¥i b·∫Øt ƒë·∫ßu nghi√™n c·ª©u v√† ph√°t tri·ªÉn √Ω t∆∞·ªüng.',
                  icon: 'üí°',
                  side: 'left'
                },
                {
                  year: '2021',
                  title: 'Ra m·∫Øt MVP',
                  desc: 'Phi√™n b·∫£n ƒë·∫ßu ti√™n c·ªßa n·ªÅn t·∫£ng ƒë∆∞·ª£c ra m·∫Øt v·ªõi 100 s·∫£n ph·∫©m v√† 500 ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n.',
                  icon: 'üöÄ',
                  side: 'right'
                },
                {
                  year: '2022',
                  title: 'M·ªü r·ªông quy m√¥',
                  desc: 'ƒê·∫°t 10,000 ng∆∞·ªùi d√πng v√† 1,000 s·∫£n ph·∫©m. Ra m·∫Øt t√≠nh nƒÉng thanh to√°n tr·ª±c tuy·∫øn v√† b·∫£o hi·ªÉm.',
                  icon: 'üìà',
                  side: 'left'
                },
                {
                  year: '2023',
                  title: 'C√¥ng ngh·ªá AI',
                  desc: 'T√≠ch h·ª£p AI ƒë·ªÉ g·ª£i √Ω s·∫£n ph·∫©m th√¥ng minh v√† chatbot h·ªó tr·ª£ kh√°ch h√†ng 24/7.',
                  icon: 'ü§ñ',
                  side: 'right'
                },
                {
                  year: '2024',
                  title: 'L√£nh ƒë·∫°o th·ªã tr∆∞·ªùng',
                  desc: 'Tr·ªü th√†nh n·ªÅn t·∫£ng cho thu√™ thi·∫øt b·ªã c√¥ng ngh·ªá s·ªë 1 Vi·ªát Nam v·ªõi 50,000+ ng∆∞·ªùi d√πng.',
                  icon: 'üèÜ',
                  side: 'left'
                }
              ].map((milestone, index) => (
                <div key={index} className={`relative flex items-center ${milestone.side === 'left' ? 'justify-start' : 'justify-end'}`}>
                  <div className={`w-1/2 ${milestone.side === 'left' ? 'pr-8 text-right' : 'pl-8 text-left'}`}>
                    <div className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-6 shadow-xl hover:shadow-2xl transition-all duration-300 hover:-translate-y-2">
                      <div className="flex items-center gap-4 mb-4">
                        <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center text-white text-xl">
                          {milestone.icon}
                        </div>
                        <div>
                          <div className="text-2xl font-bold text-blue-600">{milestone.year}</div>
                          <h3 className="text-xl font-bold text-gray-900">{milestone.title}</h3>
                        </div>
                      </div>
                      <p className="text-gray-600 leading-relaxed">{milestone.desc}</p>
                    </div>
                  </div>
                  
                  {/* Timeline Dot */}
                  <div className="absolute left-1/2 transform -translate-x-1/2 w-6 h-6 bg-white border-4 border-blue-500 rounded-full shadow-lg z-10"></div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Team */}
      <section className="py-20 bg-gradient-to-br from-blue-50 to-cyan-50">
        <div className="container">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i</h2>
            <p className="text-gray-600 text-xl">Nh·ªØng con ng∆∞·ªùi t√†i nƒÉng ƒëang x√¢y d·ª±ng t∆∞∆°ng lai c·ªßa n·ªÅn t·∫£ng</p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                name: 'Nguy·ªÖn Minh Tu·∫•n',
                role: 'CEO & Founder',
                desc: '15 nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c c√¥ng ngh·ªá v√† th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠. T·ª´ng l√† CTO t·∫°i c√°c startup th√†nh c√¥ng.',
                avatar: 'üë®‚Äçüíº',
                skills: ['Leadership', 'Strategy', 'Business Development']
              },
              {
                name: 'Tr·∫ßn Th·ªã Lan Anh',
                role: 'CTO',
                desc: 'Chuy√™n gia v·ªÅ AI/ML v√† h·ªá th·ªëng ph√¢n t√°n, t·ª´ng l√†m vi·ªác t·∫°i Google v√† Microsoft. Th·∫°c sƒ© Khoa h·ªçc M√°y t√≠nh.',
                avatar: 'üë©‚Äçüíª',
                skills: ['AI/ML', 'Cloud Architecture', 'System Design']
              },
              {
                name: 'L√™ VƒÉn ƒê·ª©c',
                role: 'Head of Product',
                desc: 'Chuy√™n gia UX/UI v·ªõi h∆°n 10 nƒÉm kinh nghi·ªám thi·∫øt k·∫ø s·∫£n ph·∫©m ng∆∞·ªùi d√πng. T·ª´ng l√†m vi·ªác t·∫°i Facebook v√† Grab.',
                avatar: 'üë®‚Äçüé®',
                skills: ['UX/UI Design', 'Product Strategy', 'User Research']
              }
            ].map((member, index) => (
              <div key={index} className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl text-center group hover:shadow-2xl transition-all duration-300 hover:-translate-y-2">
                <div className="w-24 h-24 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center text-white text-3xl mx-auto mb-6 group-hover:scale-110 transition-transform duration-300">
                  {member.avatar}
                </div>
                <h3 className="text-2xl font-bold text-gray-900 mb-2">{member.name}</h3>
                <p className="text-blue-600 font-semibold mb-4">{member.role}</p>
                <p className="text-gray-600 leading-relaxed mb-6">{member.desc}</p>
                
                {/* Skills */}
                <div className="flex flex-wrap justify-center gap-2">
                  {member.skills.map((skill, skillIndex) => (
                    <span key={skillIndex} className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm font-medium">
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <section className="py-20 bg-gradient-to-br from-blue-50 to-cyan-50">
        <div className="container">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">Kh√°ch h√†ng n√≥i g√¨ v·ªÅ ch√∫ng t√¥i</h2>
            <p className="text-gray-600 text-xl">Nh·ªØng ph·∫£n h·ªìi ch√¢n th·ª±c t·ª´ c·ªông ƒë·ªìng ng∆∞·ªùi d√πng</p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                name: 'Nguy·ªÖn Th·ªã Mai',
                role: 'Sinh vi√™n ƒê·∫°i h·ªçc B√°ch Khoa',
                content: 'N·ªÅn t·∫£ng n√†y ƒë√£ gi√∫p t√¥i ti·∫øt ki·ªám r·∫•t nhi·ªÅu chi ph√≠ khi c·∫ßn laptop cho d·ª± √°n. D·ªãch v·ª• h·ªó tr·ª£ r·∫•t t·ªët v√† thi·∫øt b·ªã lu√¥n ƒë·∫£m b·∫£o ch·∫•t l∆∞·ª£ng.',
                rating: 5,
                avatar: 'üë©‚Äçüéì'
              },
              {
                name: 'Tr·∫ßn VƒÉn Nam',
                role: 'Freelancer',
                content: 'T√¥i th∆∞·ªùng xuy√™n thu√™ camera v√† thi·∫øt b·ªã √¢m thanh cho c√°c d·ª± √°n. Quy tr√¨nh ƒë∆°n gi·∫£n, gi√° c·∫£ h·ª£p l√Ω v√† ƒë·ªôi ng≈© h·ªó tr·ª£ r·∫•t chuy√™n nghi·ªáp.',
                rating: 5,
                avatar: 'üë®‚Äçüíº'
              },
              {
                name: 'L√™ Th·ªã H∆∞∆°ng',
                role: 'Doanh nh√¢n',
                content: 'C√¥ng ty t√¥i ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• cho thu√™ thi·∫øt b·ªã vƒÉn ph√≤ng trong 2 nƒÉm qua. R·∫•t h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng d·ªãch v·ª• v√† s·ª± tin c·∫≠y c·ªßa n·ªÅn t·∫£ng.',
                rating: 5,
                avatar: 'üë©‚Äçüíº'
              }
            ].map((testimonial, index) => (
              <div key={index} className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl hover:shadow-2xl transition-all duration-300 hover:-translate-y-2">
                <div className="flex items-center mb-6">
                  <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full flex items-center justify-center text-white text-2xl mr-4">
                    {testimonial.avatar}
                  </div>
                  <div>
                    <h4 className="text-lg font-bold text-gray-900">{testimonial.name}</h4>
                    <p className="text-gray-600 text-sm">{testimonial.role}</p>
                  </div>
                </div>
                
                <div className="flex mb-4">
                  {[...Array(testimonial.rating)].map((_, i) => (
                    <span key={i} className="text-yellow-400 text-xl">‚≠ê</span>
                  ))}
                </div>
                
                <p className="text-gray-600 leading-relaxed italic">"{testimonial.content}"</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Contact */}
      <section className="py-20">
        <div className="container">
          <div className="text-center mb-16">
            <h2 className="text-4xl font-bold text-gray-900 mb-4">Li√™n h·ªá v·ªõi ch√∫ng t√¥i</h2>
            <p className="text-gray-600 text-xl">Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n</p>
          </div>

          <div className="grid lg:grid-cols-2 gap-12">
            {/* Contact Info */}
            <div className="space-y-8">
              <div className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl">
                <h3 className="text-2xl font-bold text-gray-900 mb-6">Th√¥ng tin li√™n h·ªá</h3>
                <div className="space-y-6">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center text-white">
                      üìß
                    </div>
                    <div>
                      <p className="font-semibold text-gray-900">Email</p>
                      <p className="text-gray-600">support@rentiva.com</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-500 rounded-xl flex items-center justify-center text-white">
                      üì±
                    </div>
                    <div>
                      <p className="font-semibold text-gray-900">Hotline</p>
                      <p className="text-gray-600">+84 123 456 789</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-xl flex items-center justify-center text-white">
                      üìç
                    </div>
                    <div>
                      <p className="font-semibold text-gray-900">ƒê·ªãa ch·ªâ</p>
                      <p className="text-gray-600">123 Nguy·ªÖn Hu·ªá, Q1, TP.HCM</p>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-gradient-to-r from-orange-500 to-red-500 rounded-xl flex items-center justify-center text-white">
                      üïí
                    </div>
                    <div>
                      <p className="font-semibold text-gray-900">Gi·ªù l√†m vi·ªác</p>
                      <p className="text-gray-600">Th·ª© 2 - Th·ª© 6: 8:00 - 18:00</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Social Media */}
              <div className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl">
                <h3 className="text-2xl font-bold text-gray-900 mb-6">Theo d√µi ch√∫ng t√¥i</h3>
                <div className="flex gap-4">
                  {[
                    { icon: 'üìò', name: 'Facebook', color: 'from-blue-500 to-blue-600' },
                    { icon: 'üì∑', name: 'Instagram', color: 'from-pink-500 to-purple-500' },
                    { icon: 'üê¶', name: 'Twitter', color: 'from-sky-500 to-blue-500' },
                    { icon: 'üíº', name: 'LinkedIn', color: 'from-blue-600 to-blue-700' }
                  ].map((social, index) => (
                    <a
                      key={index}
                      href="#"
                      className={`w-12 h-12 bg-gradient-to-r ${social.color} rounded-xl flex items-center justify-center text-white hover:scale-110 transition-transform duration-300`}
                      title={social.name}
                    >
                      <span className="text-lg">{social.icon}</span>
                    </a>
                  ))}
                </div>
              </div>
            </div>

            {/* Contact Form */}
            <div className="bg-white/90 backdrop-blur-sm rounded-3xl border border-white/60 p-8 shadow-xl">
              <h3 className="text-2xl font-bold text-gray-900 mb-6">G·ª≠i tin nh·∫Øn</h3>
              
              {submitSuccess && (
                <div className="mb-6 p-4 bg-green-100 border border-green-300 rounded-2xl text-green-700 flex items-center gap-3">
                  <span className="text-2xl">‚úÖ</span>
                  <span className="font-medium">Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.</span>
                </div>
              )}
              
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="grid md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">H·ªç v√† t√™n *</label>
                    <input
                      type="text"
                      name="name"
                      value={formData.name}
                      onChange={handleInputChange}
                      className={`w-full border rounded-2xl px-4 py-3 focus:outline-none focus:ring-2 bg-white/80 backdrop-blur-sm transition-all duration-300 ${
                        formErrors.name 
                          ? 'border-red-300 focus:ring-red-400' 
                          : 'border-blue-200 focus:ring-blue-400'
                      }`}
                      placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    />
                    {formErrors.name && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <span>‚ö†Ô∏è</span>
                        {formErrors.name}
                      </p>
                    )}
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Email *</label>
                    <input
                      type="email"
                      name="email"
                      value={formData.email}
                      onChange={handleInputChange}
                      className={`w-full border rounded-2xl px-4 py-3 focus:outline-none focus:ring-2 bg-white/80 backdrop-blur-sm transition-all duration-300 ${
                        formErrors.email 
                          ? 'border-red-300 focus:ring-red-400' 
                          : 'border-blue-200 focus:ring-blue-400'
                      }`}
                      placeholder="Nh·∫≠p email"
                    />
                    {formErrors.email && (
                      <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                        <span>‚ö†Ô∏è</span>
                        {formErrors.email}
                      </p>
                    )}
                  </div>
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Ch·ªß ƒë·ªÅ</label>
                  <select 
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                    className="w-full border border-blue-200 rounded-2xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white/80 backdrop-blur-sm transition-all duration-300"
                  >
                    <option value="">Ch·ªçn ch·ªß ƒë·ªÅ</option>
                    <option value="support">H·ªó tr·ª£ k·ªπ thu·∫≠t</option>
                    <option value="feedback">G√≥p √Ω s·∫£n ph·∫©m</option>
                    <option value="business">H·ª£p t√°c kinh doanh</option>
                    <option value="other">Kh√°c</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">N·ªôi dung *</label>
                  <textarea
                    name="message"
                    value={formData.message}
                    onChange={handleInputChange}
                    rows={5}
                    className={`w-full border rounded-2xl px-4 py-3 focus:outline-none focus:ring-2 bg-white/80 backdrop-blur-sm transition-all duration-300 resize-none ${
                      formErrors.message 
                        ? 'border-red-300 focus:ring-red-400' 
                        : 'border-blue-200 focus:ring-blue-400'
                    }`}
                    placeholder="Nh·∫≠p n·ªôi dung tin nh·∫Øn..."
                  />
                  {formErrors.message && (
                    <p className="text-red-500 text-sm mt-1 flex items-center gap-1">
                      <span>‚ö†Ô∏è</span>
                      {formErrors.message}
                    </p>
                  )}
                </div>
                
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className={`w-full font-bold rounded-2xl px-6 py-4 transition-all duration-300 transform shadow-lg hover:shadow-xl ${
                    isSubmitting
                      ? 'bg-gray-400 cursor-not-allowed'
                      : 'bg-gradient-to-r from-blue-600 via-cyan-500 to-teal-500 hover:from-blue-700 hover:via-cyan-600 hover:to-teal-600 hover:scale-105'
                  } text-white`}
                >
                  {isSubmitting ? (
                    <div className="flex items-center justify-center gap-2">
                      <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      <span>ƒêang g·ª≠i...</span>
                    </div>
                  ) : (
                    'G·ª≠i tin nh·∫Øn'
                  )}
                </button>
              </form>
            </div>
          </div>
        </div>
      </section>

      <Footer />
    </div>
  )
}
